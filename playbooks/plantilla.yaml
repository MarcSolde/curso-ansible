# PLANTILLA DE PLAYBOOK
  
  # Para ejecutar nuestro playbook:
  #  > ansible-playbook -i <fichero_inventario> <fichero_playbook>
  
  # Contra qué máquinas/entornos vamos a trabajar
- hosts: localhost
  # Decidir el usuario con el que conectarnos a un entorno
  remote_user: root
  # Decidir el orden de los entornos en el que se van a ir ejecutando las tareas
  order: inventory 
  gather_facts: true
         # inventory | reverse_inventory | sorted | reverse_sorted | suffle
  
    # También podré configurar sobre cuántos entornos quiero operar simultaneamente.
    # Esta info no viene en este fichero
  # Variables que luego utilizar en las tareas
  vars:
    puerto: 8080
    configuracion: 
      nginx:
        puerto: 80
        ssl: false
      apache:
        puerto: 
          - 443
          - 9443
        ssl: true
  # Listado de todas las tareas que queriamos realizar en los entornos 
  tasks:
    - name: 1- Inicialización
      debug: 
        msg: Inicialización de nuestro playbook

    - name: 2- Valor variable
      debug: 
        msg: "{{puerto}}"
        
    - name: 3- Generar doble llave de un texto
      debug: 
        msg: !unsafe "Para obtener el valor de una variable debo usar la sintaxis: {{puerto}}"
    
    - name: 4- Valor variable jerarquicas
      debug: 
        msg: "el segundo puerto de conf apache port{{configuracion.apache.puerto[1]}}"
        
    - name: 5- Redefinir/crear variable
      debug: 
        msg: "{{puerto}}, {{sopmeVar}}"
      vars:
        puerto: 9999
        sopmeVar: "AA"
        
    - name: 7- Mostrar caracteristicas de las maquinas
      debug: 
        # | guarda las tabulaciones y > no las guarda
        msg: >
          "Caracteristicas {{ansible_facts.distribution}} "
          "{{ansible_facts.distribution_version}}"
  # Listado de tareas que se ejecuran bajo ciertos condiciones (cuando ocurren unos eventos)
  # handlers:
## CONDICIONALES
    - name: 8- Mostrar caracteristicas de las maquinas SOLO en maquinas ubuntu
      debug: 
        # | guarda las tabulaciones y > no las guarda
        msg: >
          "Ubuntu time -> Caracteristicas {{ansible_facts.distribution}} "
          "{{ansible_facts.distribution_version}}"
      when: ansible_facts.distribution == "Ubuntu"
      
    - name: 9- Mostrar caracteristicas de las maquinas SOLO en maquinas redhat
      debug: 
        # | guarda las tabulaciones y > no las guarda
        msg: >
          "Ubuntu time -> Caracteristicas {{ansible_facts.distribution}} "
          "{{ansible_facts.distribution_version}}"
      when: ansible_facts.distribution == "Redhat"
      
    - name: 10- Mostrar caracteristicas de las maquinas SOLO en maquinas version ansible > 16 y ubuntu
      debug: 
        # | guarda las tabulaciones y > no las guarda
        msg: >
          "16 time -> Caracteristicas {{ansible_facts.distribution}} "
          "{{ansible_facts.distribution_version}}"
      when: ansible_facts.distribution_major_version > "16" and ansible_facts.distribution == "Ubuntu"
      
      
    - name: 11- Tarea que lanza un evento
      debug: 
        msg: "lanzo evento de formatear"
      notify: Formatear Disco
    
    - name: 12- Tarea que lanza un evento (Hacemos trampas para que el debug se marque como si que ha cambiado algo)
      debug: 
        msg: "lanzo evento de formatear"
      notify: Formatear Disco
      # La trampa V
      changed_when: true
    
    - name: 13- Tarea que lanza un evento (Hacemos trampas para que el debug se marque como si que ha cambiado algo)
      debug: 
        msg: "lanzo evento de formatear"
      notify: FORMATEAR
      # La trampa V
      changed_when: true
      
      
  ## Basado en tags
  # ansible-playbook [...] -tags <tags que quiero que se ejecuten>
  # ansible-playbook [...] -tags <tags que quiero que no se ejecuten>
    - name: Filtro 1
      debug:
        msg: "Tarea 1 filtro"
      tags:
        - tag1
    
    - name: Filtro 2
      debug:
        msg: "Tarea 2 filtro"
      tags:
        - tag1
        - tag2
    
    - name: Filtro 3
      debug:
        msg: "Tarea 3 filtro"
      tags:
        - tag2
      

  ## Controlar estado de ejecucion de una tarea
    - name: 14- Crear o modificar un fichero
      shell:
        cmd: echo CONTENIDO > /home/ubuntu/FICHERO.txt && exit 9
      register: resultado_proceso
        # .rc -> codigo de salida
        # .stdout -> Salida estandar
      failed_when: resultado_proceso.rc > 10
    
    - name: 15- Mostrar informacion del proceso registrado
      debug:
        msg: "{{resultado_proceso}}"
        
    - name: 16- Comprobar estado puerot 22
      shell:
        cmd: netstat -lnt | grep :22
      register: resultado_puerto
      changed_when: false
      
    - name: 16.1- Comprobar estado puerot 22 no es listen
      shell:
        cmd: netstat -lnt | grep :22
      register: resultado_puerto
      changed_when: false
      failed_when: "resultado_puerto.stdout is search('.*LISTEN.*')"
      ignore_errors: true
    
    - name: 17- solo se ejecuta si la tarea 16.1 fallo
      debug:
        msg: "La tarea 16.1 fallo"
      when: resultado_puerto is failed
      
    - name: 18- Listado ipv4 de la maquina
      debug: 
        msg: "ip: {{item}}"
      loop: "{{ ansible_facts.all_ipv4_addresses }}"
      
    - name: 18- Listado cpus de la maquina (ver codigo profesor)
      debug: 
        msg: "cpu info: {{numero}} --- {{item}}"
      loop: "{{ ansible_facts.processor }}"
      loop_control:
        index_var: numero
        
  
  ## Trabajjo con bloques
    - name: tarea en bloques
      block:
        - name: Tarea 1
          debug:
            msg: "Tarea 1"
        - name: Tarea 2
          debug:
            msg: "Tarea 2"
        - name: Tarea 3
          debug:
            msg: "Tarea 3"
            
      when: ansible_facts.distribution == "Ubuntu"
      ignore_errors: true
      
    - name: tarea en bloques control de errores
      block:
        - name: Tarea 1
          debug:
            msg: "Tarea 1"
        - name: Tarea 2
          shell:
            cmd: exit 1
        - name: Tarea 3
          debug:
            msg: "Tarea 3"
        
      rescue:
        - name: Tarea rescue
          debug:
            msg: "Al rescate!"
            
      always:
        - name: Tarea que se ejecuta siempre despues del bloque
          debug:
            msg: "never ever im not going to appear"
            
            
  ##Everything is better wiht ninjas
  
    - name: Tarea para plantillas jinja - espacios
      debug:
        msg: "valor de texto es {{texto| trim}}"
      vars:
        texto: "       AAAAAA     "
        
    - name: Tarea para plantillas jinja - listas
      debug:
        msg: "puertos {{puertos| sort}}"
      
      vars:
        puertos:
          - 80
          - 8080
          - 443
          - 9443
          - 9080
      
    - name: Ultima tarea
      debug: 
        msg: "Hemos acabado las tareas normales"
      
  ## LOS Handler solo se ejecutan una vez y despues de todas las tareas
  handlers:
    - name: Formatear Disco
      debug:
        msg: Estoy formateandon el disco
      listen: FORMATEAR
    
    - name: Post-Formatear Disco
      listen: FORMATEAR
      debug:
        msg: postformateo